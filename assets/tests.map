{"version":3,"sources":["dummy/tests/app.jshint.js","dummy/tests/components/highlight-js.jshint.js","dummy/tests/controllers/demos/change-action.jshint.js","dummy/tests/controllers/demos/schema-updates.jshint.js","dummy/tests/dynamic-forms/filter-rules/admin-only.jshint.js","dummy/tests/dynamic-forms/formatters/lower-case.jshint.js","dummy/tests/dynamic-forms/formatters/proper-name.jshint.js","dummy/tests/dynamic-forms/validations/drinking-age.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/components/buttons-test.js","dummy/tests/integration/components/buttons-test.jshint.js","dummy/tests/integration/components/change-action-test.js","dummy/tests/integration/components/change-action-test.jshint.js","dummy/tests/integration/components/data-binding-test.js","dummy/tests/integration/components/data-binding-test.jshint.js","dummy/tests/integration/components/dynamic-form-test.js","dummy/tests/integration/components/dynamic-form-test.jshint.js","dummy/tests/integration/components/filter-rules-test.js","dummy/tests/integration/components/filter-rules-test.jshint.js","dummy/tests/integration/components/formatters-test.js","dummy/tests/integration/components/formatters-test.jshint.js","dummy/tests/integration/components/null-data-test.js","dummy/tests/integration/components/null-data-test.jshint.js","dummy/tests/integration/components/validation-test.js","dummy/tests/integration/components/validation-test.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/demos.jshint.js","dummy/tests/routes/demos/actions.jshint.js","dummy/tests/routes/demos/basic-usage.jshint.js","dummy/tests/routes/demos/change-action.jshint.js","dummy/tests/routes/demos/data.jshint.js","dummy/tests/routes/demos/filter-rules.jshint.js","dummy/tests/routes/demos/formatting.jshint.js","dummy/tests/routes/demos/schema-updates.jshint.js","dummy/tests/routes/demos/validation.jshint.js","dummy/tests/routes/index.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/highlight-js.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/highlight-js.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/highlight-js.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/demos/change-action.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/demos/change-action.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/demos/change-action.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/demos/schema-updates.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/demos/schema-updates.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/demos/schema-updates.js should pass jshint.');\n  });\n});","define('dummy/tests/dynamic-forms/filter-rules/admin-only.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - dynamic-forms/filter-rules/admin-only.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dynamic-forms/filter-rules/admin-only.js should pass jshint.');\n  });\n});","define('dummy/tests/dynamic-forms/formatters/lower-case.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - dynamic-forms/formatters/lower-case.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dynamic-forms/formatters/lower-case.js should pass jshint.');\n  });\n});","define('dummy/tests/dynamic-forms/formatters/proper-name.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - dynamic-forms/formatters/proper-name.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dynamic-forms/formatters/proper-name.js should pass jshint.');\n  });\n});","define('dummy/tests/dynamic-forms/validations/drinking-age.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - dynamic-forms/validations/drinking-age.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dynamic-forms/validations/drinking-age.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/buttons-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n    (0, _emberQunit.moduleForComponent)('/dynamic-form', 'Integration | Component | dynamic-form:actions', {\n        integration: true\n    });\n\n    var schemaObject = {\n        \"schema\": {\n            \"title\": \"Your Information\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"firstName\": {\n                    \"title\": \"First Name\",\n                    \"type\": \"string\"\n                },\n                \"lastName\": {\n                    \"title\": \"Last Name\",\n                    \"type\": \"string\"\n                },\n                \"age\": {\n                    \"title\": \"Age\",\n                    \"type\": \"integer\",\n                    \"minimum\": 0,\n                    \"maximum\": 100\n                },\n                \"preferences\": {\n                    \"title\": \"Preferences\",\n                    \"type\": \"string\",\n                    \"enum\": [\"Non-Smoking\", \"Vegetarian\", \"Wheelchair Accessible\", \"Child Friendly\"]\n                }\n            }\n        },\n        \"options\": {\n            \"fields\": {\n                \"preferences\": {\n                    \"type\": \"checkbox\"\n                }\n            },\n            \"form\": {\n                \"buttons\": {\n                    \"submit\": {}\n                }\n            }\n        }\n    };\n\n    (0, _emberQunit.test)('should invoke provided action when button clicked', function (assert) {\n        var _this = this;\n\n        var testSchemaObject = _.clone(schemaObject, true);\n        testSchemaObject.postRender = function () {\n            _this.$('.alpaca-form-buttons-container button').click();\n        };\n        this.set('schemaObject', testSchemaObject);\n        var done = assert.async();\n        var submitAction = {\n            submit: function submit() {\n                assert.ok(true);\n                done();\n            }\n        };\n        this.set('actions', submitAction);\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'fragmentReason': {\n                        'name': 'missing-wrapper',\n                        'problems': ['wrong-type']\n                    },\n                    'revision': 'Ember@2.5.1',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 57\n                        }\n                    }\n                },\n                isEmpty: false,\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schemaObject', ['loc', [null, [1, 22], [1, 34]]]]], [], []], 'formActions', ['subexpr', '@mut', [['get', 'actions', ['loc', [null, [1, 47], [1, 54]]]]], [], []]], ['loc', [null, [1, 0], [1, 57]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n    });\n});","define('dummy/tests/integration/components/buttons-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/buttons-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/buttons-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/change-action-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var schemaObject = {\n    \"schema\": {\n      \"title\": \"What do you think of Alpaca?\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"Name\"\n        },\n        \"ranking\": {\n          \"type\": \"string\",\n          \"title\": \"Ranking\",\n          \"enum\": ['excellent', 'not too shabby', 'alpaca built my hotrod']\n        }\n      }\n    }\n\n  };\n\n  (0, _emberQunit.moduleForComponent)('/dynamic-form', 'Integration | Component | dynamic-form:changeAction', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('should fire action on changes in form', function (assert) {\n    var _this = this;\n\n    var done = assert.async();\n    this.on('changeAction', function (event) {\n      assert.equal(event.target.value, 'todd');\n      done();\n    });\n\n    var schema = _.clone(schemaObject, true);\n    var postRender = function postRender() {\n      _this.$('.alpaca-field-text input').val('todd').keyup();\n    };\n    this.set('postRender', postRender);\n    this.set('schema', schema);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['postRender', ['subexpr', '@mut', [['get', 'postRender', ['loc', [null, [2, 30], [2, 40]]]]], [], []], 'schema', ['subexpr', '@mut', [['get', 'schema', ['loc', [null, [2, 48], [2, 54]]]]], [], []], 'changeAction', ['subexpr', 'action', ['changeAction'], [], ['loc', [null, [2, 68], [2, 91]]]]], ['loc', [null, [2, 4], [2, 93]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n\n  (0, _emberQunit.test)('should fire action and perform postRender when defined on schema', function (assert) {\n    var _this2 = this;\n\n    var done = assert.async();\n    this.on('changeAction', function (event) {\n      assert.equal(event.target.value, 'todd');\n      done();\n    });\n\n    var schema = _.clone(schemaObject, true);\n    schema.postRender = function () {\n      _this2.$('.alpaca-field-text input').val('todd').keyup();\n    };\n    this.set('schema', schema);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schema', ['loc', [null, [2, 26], [2, 32]]]]], [], []], 'changeAction', ['subexpr', 'action', ['changeAction'], [], ['loc', [null, [2, 46], [2, 69]]]]], ['loc', [null, [2, 4], [2, 71]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/change-action-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/change-action-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/change-action-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/data-binding-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var schemaObject = {\n    \"schema\": {\n      \"title\": \"What do you think of Alpaca?\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"Name\"\n        },\n        \"ranking\": {\n          \"type\": \"string\",\n          \"title\": \"Ranking\",\n          \"enum\": ['excellent', 'not too shabby', 'alpaca built my hotrod']\n        }\n      }\n    }\n  };\n\n  var dataObject = {\n    \"name\": \"Todd Jordan\",\n    \"ranking\": \"not too shabby\"\n  };\n\n  var EmberData = _ember['default'].Object.extend({\n    name: _ember['default'].computed('firstName', 'lastName', function () {\n      return this.get('firstName') + ' ' + this.get('lastName');\n    })\n\n  });\n\n  (0, _emberQunit.moduleForComponent)('/dynamic-form', 'Integration | Component | dynamic-form:data-binding', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('should update input value when model updated', function (assert) {\n    var _this = this;\n\n    var fixtureSchema = _.clone(schemaObject, true);\n    var done = assert.async();\n    fixtureSchema.postRender = function () {\n      assert.equal(_this.$('.alpaca-field-text input').val(), 'Todd Jordan');\n      dataObject.name = 'Jeremy Rowe';\n      fixtureSchema.postRender = function () {\n        assert.equal(_this.$('.alpaca-field-text input').val(), 'Jeremy Rowe');\n        done();\n      };\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 52\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schemaObject', ['loc', [null, [1, 22], [1, 34]]]]], [], []], 'data', ['subexpr', '@mut', [['get', 'dataObject', ['loc', [null, [1, 40], [1, 50]]]]], [], []]], ['loc', [null, [1, 0], [1, 52]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    };\n    this.set('schemaObject', fixtureSchema);\n    this.set('dataObject', dataObject);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 52\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schemaObject', ['loc', [null, [1, 22], [1, 34]]]]], [], []], 'data', ['subexpr', '@mut', [['get', 'dataObject', ['loc', [null, [1, 40], [1, 50]]]]], [], []]], ['loc', [null, [1, 0], [1, 52]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n\n  (0, _emberQunit.test)('should work with an ember object as data', function (assert) {\n    var _this2 = this;\n\n    var fixtureSchema = _.clone(schemaObject, true);\n    var done = assert.async();\n    fixtureSchema.postRender = function () {\n      assert.equal(_this2.$('.alpaca-field-text input').val(), 'Todd Jordan');\n      fixtureSchema.postRender = function () {\n        assert.equal(_this2.$('.alpaca-field-text input').val(), 'Jeremy Rowe');\n        done();\n      };\n      _this2.get('dataObject').set('firstName', 'Jeremy');\n      _this2.get('dataObject').set('lastName', 'Rowe');\n      _this2.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 52\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schemaObject', ['loc', [null, [1, 22], [1, 34]]]]], [], []], 'data', ['subexpr', '@mut', [['get', 'dataObject', ['loc', [null, [1, 40], [1, 50]]]]], [], []]], ['loc', [null, [1, 0], [1, 52]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    };\n    this.set('schemaObject', fixtureSchema);\n    this.set('dataObject', EmberData.create({\n      firstName: 'Todd',\n      lastName: 'Jordan',\n      ranking: 'excellent'\n    }));\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 52\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schemaObject', ['loc', [null, [1, 22], [1, 34]]]]], [], []], 'data', ['subexpr', '@mut', [['get', 'dataObject', ['loc', [null, [1, 40], [1, 50]]]]], [], []]], ['loc', [null, [1, 0], [1, 52]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});\n//import Ember from 'ember';","define('dummy/tests/integration/components/data-binding-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/data-binding-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/data-binding-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/dynamic-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var basicObject = {\n    \"schema\": {\n      \"title\": \"What do you think of Alpaca?\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"Name\"\n        },\n        \"ranking\": {\n          \"type\": \"string\",\n          \"title\": \"Ranking\",\n          \"enum\": ['excellent', 'not too shabby', 'alpaca built my hotrod']\n        }\n      }\n    }\n  };\n\n  (0, _emberQunit.moduleForComponent)('/dynamic-form', 'Integration | Component | dynamic-form:basic', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('should render form from valid schema object', function (assert) {\n    var _this = this;\n\n    var done = assert.async();\n    basicObject[\"postRender\"] = function () {\n      assert.ok(_this.$('.alpaca-field-text input').length, 'input field exists');\n      assert.ok(_this.$('.alpaca-field-radio').length, 'radio group exists');\n      done();\n    };\n    this.set('basicObject', basicObject);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 35\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'basicObject', ['loc', [null, [1, 22], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n\n  (0, _emberQunit.test)('should render form from valid schema string', function (assert) {\n    var _this2 = this;\n\n    var done = assert.async();\n    var postRenderFn = function postRenderFn() {\n      assert.ok(_this2.$('.alpaca-field-text input').length, 'input field exists');\n      assert.ok(_this2.$('.alpaca-field-radio').length, 'radio group exists');\n      done();\n    };\n    var basicString = JSON.stringify(basicObject);\n    this.set('postRenderFn', postRenderFn);\n    this.set('basicString', basicString);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 59\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'basicString', ['loc', [null, [1, 22], [1, 33]]]]], [], []], 'postRender', ['subexpr', '@mut', [['get', 'postRenderFn', ['loc', [null, [1, 45], [1, 57]]]]], [], []]], ['loc', [null, [1, 0], [1, 59]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/dynamic-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/dynamic-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dynamic-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/filter-rules-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  var basicObject = {\n    \"schema\": {\n      \"title\": \"What do you think of Alpaca?\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"Name\"\n        },\n        \"ranking\": {\n          \"type\": \"string\",\n          \"title\": \"Ranking\",\n          \"enum\": ['excellent', 'not too shabby', 'alpaca built my hotrod']\n        }\n      }\n    },\n    \"options\": {\n      \"fields\": {\n        \"name\": {\n          \"filter-rules\": [\"admin-only\"]\n        }\n      }\n    }\n  };\n\n  var filterRule = _ember['default'].Object.extend({\n    filter: function filter(key, schemaObj) {\n      var fieldOption = schemaObj.options.fields[key];\n      fieldOption.disabled = true;\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('dynamic-form', 'Integration | Component | dynamic-form:filter-rules', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('admin-only:forms.filter-rules', filterRule);\n    }\n  });\n\n  (0, _emberQunit.test)('should disable a field based a users role', function (assert) {\n    var _this = this;\n\n    var done = assert.async();\n    basicObject['postRender'] = function () {\n      assert.ok(_this.$('.alpaca-field-text input').prop('disabled'), 'field is disabled');\n      done();\n    };\n    this.set('basicObject', basicObject);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 35\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'basicObject', ['loc', [null, [1, 22], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/filter-rules-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/filter-rules-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/filter-rules-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/formatters-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  var formatter = _ember['default'].Object.extend({\n    format: function format() {\n      this.setValue(\"ALPACA!\");\n    }\n  });\n\n  var basicObject = {\n    \"schema\": {\n      \"title\": \"What do you think of Alpaca?\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"Name\"\n        },\n        \"ranking\": {\n          \"type\": \"string\",\n          \"title\": \"Ranking\",\n          \"enum\": ['excellent', 'not too shabby', 'alpaca built my hotrod']\n        }\n      }\n    },\n    \"options\": {\n      \"fields\": {\n        \"name\": {\n          \"events\": {\n            \"change\": \"drinking-age\"\n          }\n        }\n      }\n    }\n  };\n\n  (0, _emberQunit.moduleForComponent)('dynamic-form', 'Integration | Component | dynamic-form:formatters', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('drinking-age:dynamic-forms.formatters', formatter);\n    }\n  });\n\n  (0, _emberQunit.test)('applies a custom formatter when the user tabs away from the drinking age field', function (assert) {\n    var _this = this;\n\n    var done = assert.async();\n    basicObject[\"postRender\"] = function () {\n      _this.$('.alpaca-field-text input').val('matters not').change();\n      assert.equal(_this.$('.alpaca-field-text input').val(), \"ALPACA!\");\n      done();\n    };\n\n    this.set('basicObject', basicObject);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 35\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'basicObject', ['loc', [null, [1, 22], [1, 33]]]]], [], []]], ['loc', [null, [1, 0], [1, 35]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/formatters-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/formatters-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/formatters-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/null-data-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var schemaObject = {\n    \"schema\": {\n      \"title\": \"What do you think of Alpaca?\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"title\": \"Name\"\n        },\n        \"feedback\": {\n          \"type\": \"string\",\n          \"title\": \"Feedback\"\n        },\n        \"ranking\": {\n          \"type\": \"string\",\n          \"title\": \"Ranking\",\n          \"enum\": ['excellent', 'not too shabby', 'alpaca built my hotrod']\n        }\n      }\n    },\n    \"view\": \"bootstrap-display-horizontal\"\n  };\n\n  var dataObject = {\n    \"name\": \"Todd Jordan\",\n    \"ranking\": null,\n    \"feedback\": null\n  };\n\n  (0, _emberQunit.moduleForComponent)('/dynamic-form', 'Integration | Component | dynamic-form:null-data', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('should render empty string for null value in display mode', function (assert) {\n    var _this = this;\n\n    var fixtureSchema = _.clone(schemaObject, true);\n    var done = assert.async();\n    fixtureSchema.postRender = function () {\n      assert.equal(_this.$('.alpaca-control[name=\"name\"]').text(), \"Todd Jordan\");\n      assert.equal(_this.$('.alpaca-control[name=\"feedback\"]').text(), \"\");\n      assert.equal(_this.$('.alpaca-control[name=\"ranking\"]').text().trim(), \"\");\n      done();\n    };\n    this.set('schemaObject', fixtureSchema);\n    this.set('dataObject', dataObject);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 52\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'schemaObject', ['loc', [null, [1, 22], [1, 34]]]]], [], []], 'data', ['subexpr', '@mut', [['get', 'dataObject', ['loc', [null, [1, 40], [1, 50]]]]], [], []]], ['loc', [null, [1, 0], [1, 52]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/null-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/null-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/null-data-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/validation-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  var validationObject = {\n    \"schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"age\": {\n          \"type\": \"number\",\n          \"minimum\": 0\n        },\n        \"beverage\": {\n          \"type\": \"string\",\n          \"enum\": [\"water\", \"sode\", \"beer\", \"wine\"]\n        }\n      }\n    },\n    \"options\": {\n      \"fields\": {\n        \"name\": {\n          \"label\": \"Name\"\n        },\n        \"age\": {\n          \"label\": \"Age\",\n          \"type\": \"integer\",\n          \"slider\": true\n        },\n        \"beverage\": {\n          \"label\": \"Choice of Beverage\",\n          \"slider\": true,\n          \"validator\": \"drinking-age\"\n        }\n      }\n    }\n  };\n\n  var validator = _ember['default'].Object.extend({\n    validate: function validate(callback) {\n      var value = this.getValue();\n      var age = this.getParent().childrenByPropertyId[\"age\"].getValue();\n      if ((value === \"beer\" || value === \"wine\") && age < 21) {\n        callback({\n          \"status\": false,\n          \"message\": \"You are too young to drink alcohol!\"\n        });\n        return;\n      }\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('/dynamic-form', 'Integration | Component | dynamic-form:validations', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('drinking-age:forms.validations', validator);\n    }\n  });\n\n  (0, _emberQunit.test)('should replace validator string with corresponding function', function (assert) {\n    var _this = this;\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      var postRenderFn = function postRenderFn() {\n        _this.$('input[name=\"name\"]').val('Todd');\n        _this.$('input[name=\"age\"]').val('15');\n        _this.$('select').change(function () {\n          _ember['default'].run.later(function () {\n            resolve();\n          }, 1000);\n        });\n        _this.$('select').val('beer').change();\n      };\n      _this.set('postRenderFn', postRenderFn);\n      _this.set('validationObject', validationObject);\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 64\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'dynamic-form', [], ['schema', ['subexpr', '@mut', [['get', 'validationObject', ['loc', [null, [1, 22], [1, 38]]]]], [], []], 'postRender', ['subexpr', '@mut', [['get', 'postRenderFn', ['loc', [null, [1, 50], [1, 62]]]]], [], []]], ['loc', [null, [1, 0], [1, 64]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    }).then(function () {\n      assert.equal(_this.$('.alpaca-message').text().trim(), 'You are too young to drink alcohol!');\n    });\n  });\n});","define('dummy/tests/integration/components/validation-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/validation-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validation-test.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/actions.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/actions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/actions.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/basic-usage.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/basic-usage.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/basic-usage.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/change-action.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/change-action.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/change-action.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/data.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/data.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/data.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/filter-rules.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/filter-rules.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/filter-rules.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/formatting.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/formatting.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/formatting.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/schema-updates.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/schema-updates.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/schema-updates.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/demos/validation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/demos/validation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/demos/validation.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxllpxfile":"tests.js"}