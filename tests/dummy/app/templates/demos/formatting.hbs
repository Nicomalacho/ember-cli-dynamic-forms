<h2>Formatting</h2>
<p>The  ember-cli-dynamic-forms addon allows you to provide reusable formatting logic.  Formatting logic is code that runs on a
  field when it changes, such as phone number or monetary formatting. </p>
<p>Formatters are defined in <code>/app/dynamic-forms/formatters</code> and is made available to the form as a change event.</p>
<p>For an example, lets create a formatter that ensures the first letter of you name is capitalized.  We'll start by creating an formatter using the ember-cli blueprint generate command:</p>

<p><code>ember g dynamic-form-formatter/proper-name</code> ... which will generate the file <code>/app/forms/formatters/proper-name.js</code></p>

{{#highlight-js}}
<pre><code>import Ember from 'ember';

export default Ember.Object.extend({
  format() {
    const originalValue = this.getValue();
    const newValue = str.replace(/\w\S*/g, function(originalValue){
      return originalValue.charAt(0).toUpperCase() + originalValue.substr(1).toLowerCase();
    });
    this.setValue(newValue);
  }
});</code></pre>
{{/highlight-js}}

If you add a formatter to a field's change even option, the function will run when you change that field.  We will add the formatter to the name field below.

{{#highlight-js}}<pre><code>import Ember from 'ember';

const basicFormatting = {
  "schema": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "age": {
        "type": "number",
        "minimum": 0
      },
      "beverage": {
        "type": "string",
        "enum": ["water", "soda", "beer", "wine"]
      }
    }
  },
  "options": {
    "focus":false,
    "fields": {
      "name": {
        "label": "Name",
        "events": {
          "change": "proper-name"
        }
      },
      "age": {
        "label": "Age",
        "type": "integer",
        "slider": true
      },
      "beverage": {
        "label": "Choice of Beverage",
        "slider": true,
        "validator": "drinking-age"
      }
    }
  }
};

export default Ember.Route.extend({
  model() {
    return Ember.Object.create({ basicFormatting });
  }
});</code></pre>
{{/highlight-js}}

Using formatters requires no change to the component definition.
{{#highlight-js}}
  <pre><code>\{{dynamic-form schema=model.basicFormatting}}</code></pre>
{{/highlight-js}}

<h3>Demo</h3>
{{dynamic-form schema=model.basicFormatting}}

